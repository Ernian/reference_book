const git = [
    {
        sectionName: 'Настройка и конфигурация',
        articles: [
            {
                articleName: 'git init',
                shortDescription: 'Инициализация локального репозитория в текущем каталоге',
                description: ['Инициализирует локальный репозиторий. Создает в текущем каталоге новый подкаталог с именем .git, который содержит все необходимые файлы репозитория (структуру git репозитория).'],
                source: [],
            },
            {
                articleName: 'git config',
                shortDescription: 'Используется для установки настроек репозитория',
                description: [
                    'Используется для установки настроек репозитория',
                    { code: 'git config --system', description: 'общесистемные настройки' },
                    { code: 'git config --global', description: 'настройки на уровне конкретного пользователя' },
                    { code: 'git config --local', description: 'настройки на уровне конкретного проекта' },
                    { code: 'git config --global user.name "John Doe"', description: 'установка имени пользователя' },
                    { code: 'git config --global user.email johndoe@example.com', description: 'установка почты пользователя' },
                ],
                source: [{ name: 'Первоначальная настройка Git', path: 'https://git-scm.com/book/ru/v2/Введение-Первоначальная-настройка-Git' },],
            },
        ],
    },
    {
        sectionName: 'Основные команды',
        articles: [
            {
                articleName: 'git add',
                shortDescription: 'Команда git add добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита.',
                description: [],
                source: [],
            },
            {
                articleName: 'git commit',
                shortDescription: 'Команда берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.',
                description: [],
                source: [],
            },
            {
                articleName: 'git status',
                shortDescription: 'Команда git status показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, но не добавлены в индекс: какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.',
                description: [
                    { code: 'git status -s || git status -short', description: 'упрощенный вывод ' },
                ],
                source: [],
            },
            {
                articleName: 'git diff',
                shortDescription: 'Просмотр индексированных и неиндексированных изменений',
                description: ['Если результат работы команды git status недостаточно информативен и хочется знать, что конкретно поменялось, а не только какие файлы были изменены — можно использовать команду git diff. Ее основное применение - это получение ответов на два вопроса: что вы изменили, но еще не проиндексировали, и что вы проиндексировали и собираетесь добавить в коммит.',
                    'Чтобы увидеть, что вы уже изменили, но пока не проиндексировали, наберите git diff без аргументов. Эта команда сравнивает содержимое вашего рабочего каталога с содержимым индекса. Результат показывает еще не проиндексированные изменения',
                    { code: 'git diff --staged || git diff --cached', description: 'Если вы хотите посмотреть, что вы проиндексировали и что войдет в следующий коммит, эта команда сравнивает ваши проиндексированные изменения с последним коммитом.' },
                ],
                source: [],
            },
            {
                articleName: 'git rm',
                shortDescription: 'Используется для удаления файлов из индекса и рабочей копии.',
                description: ['Для того чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов (точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать команда git rm, которая также удаляет файл из вашего рабочего каталога, так что в следующий раз вы не увидите его как «неотслеживаемый».',
                    'Если вы изменили файл и уже проиндексировали его, вы должны использовать принудительное удаление с помощью параметра -f. Это сделано для повышения безопасности, чтобы предотвратить ошибочное удаление данных, которые ещё не были записаны в снимок состояния и которые нельзя восстановить из Git.',
                    'Другая полезная штука, которую вы можете захотеть сделать — это удалить файл из индекса, оставив его при этом в рабочем каталоге. Другими словами, вы можете захотеть оставить файл на жёстком диске, но перестать отслеживать изменения в нём. Это особенно полезно, если вы забыли добавить что-то в файл .gitignore и по ошибке проиндексировали, например, большой файл с логами, или кучу промежуточных файлов компиляции. Чтобы сделать это, используйте опцию --cached'],
                source: [],
            },
        ]
    }
]